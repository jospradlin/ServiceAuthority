scalar DateTime


type Query {

  # General Object Requests
  user(id: ID!): User!
  users: [User!]!
  # tenant(id: ID!): Tenant!
  # tenants: [Tenant!]!
  service(id: ID!): Service!
  services: [Service!]!
  environment(id: ID!): Environment!
  environments: [Environment!]!
  environmentTenant(id: ID!): EnvironmentTenant!
  environmentTenants: [EnvironmentTenant!]!
  customer(id: ID!): Customer!
  customers: [Customer!]!
  customerContact(id: ID!): CustomerContact!
  customerContacts: [CustomerContact!]!

}

type Mutation {

  # User Mutations
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  removeUserById( id: ID! ): User
  removeUserByCode( code: String! ): User

  ##################### Configuration Management #####################
  ## - Service, Environments, Environment Tenants, and Customers #####
  
  ### Service ###
  createServiceByObj( serviceObject: ServiceInput! ): Service
  createService( name: String!, code: String!, description: String, status: String!, type: String!, version: String, canBeRemoved: Boolean ): Service
  updateServiceById( id: ID!, serviceObject: ServiceInput ): Service
  updateServiceByCode( code: String!, serviceObject: ServiceInput ): Service
  removeServiceById( id: ID! ): Service
  removeServiceByCode( code: String! ): Service

  ### Environment ###
  createEnvironmentByObj( environmentObject: EnvironmentInput!, service: ObjectQueryInput! ): Environment
  createEnvironment( name: String!, code: String!, description: String, classification: String!, region: String, serviceCode: String! ): Environment
  updateEnvironmentById( id: ID!, environmentObject: EnvironmentInput): Environment
  updateEnvironmentByCode( code: String!, environmentObject: EnvironmentInput): Environment
  removeEnvironmentById ( id: ID! ): Environment
  removeEnvironmentByCode( code: String! ): Environment

  ### Environment Tenant ###
  createEnvironmentTenantByObj( environmentTenantObject: EnvironmentTenantInput!, customer: ObjectQueryInput!, environment: ObjectQueryInput! ): EnvironmentTenant
  createEnvironmentTenant( name: String!, code: String!, class: String, primaryContactEmail: String, tenantCreationDate: DateTime, customerCode: String!, environmentCode: String! ): EnvironmentTenant
  updateEnvironmentTenantById( id: ID!, environmentTenantObject: EnvironmentTenantInput! ): EnvironmentTenant
  updateEnvironmentTenantByCode( code: String!, environmentTenantObject: EnvironmentTenantInput! ): EnvironmentTenant
  removeEnvironmentTenantById( id: ID! ): EnvironmentTenant
  removeEnvironmentTenantByCode( code: String! ): EnvironmentTenant

  ### Customer ###
  createCustomerByObj( customerObject: CustomerInput! ): Customer
  createCustomer( name: String!, code: String!, status: String! ): Customer
  updateCustomerById( id: ID!, customerObject: CustomerInput ): Customer
  updateCustomerByCode( code: String!, customerObject: CustomerInput ): Customer
  removeCustomerById( id: ID! ): Customer
  removeCustomerByCode( code: String! ): Customer

  ### Customer Contact ###
  createCustomerContactByObj( contactObject: CustomerContactInput!, customer: ObjectQueryInput! ): CustomerContact
  createCustomerContact( name: String!, email: String!, phone: String, sms: String, customerCode: String! ): CustomerContact
  updateCustomerContactById( id: ID!, contactObject: CustomerContactInput): CustomerContact
  updateCustomerContactByEmail( email: String!, contactObject: CustomerContactInput): CustomerContact
  removeCustomerContactById ( id: ID! ): CustomerContact
  removeCustomerContactByEmail( email: String! ): CustomerContact

}

type Link {
  id: ID!
  description: String!
  url: String!
}

type Service {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  name: String!
  code: String!
  description: String
  status: String!
  type: String!
  version: String
  canBeRemoved: Boolean
  dependentServices: [Service!]!
  # environments: [Environment!]!
  # owner: User
  # tenant: Tenant!
}


## SERVER-obscured Type Classes
type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  # tenantRoles: [Tenant!]!
}

type Customer {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  name: String!
  code: String!
  status: String!
  contacts: [CustomerContact!]!
  # tenants: [EnvironmentTenant!]!
}

type CustomerContact {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  name: String!
  email: String!
  phone: String
  sms: String
  customer: Customer!
}

type EnvironmentTenant {
  id: ID! 
  createdAt: DateTime!
  updatedAt: DateTime
  name: String!
  code: String!
  class: String
  primaryContactEmail: String
  tenantCreationDate: DateTime
  customer: Customer!
  environment: Environment!
  #attributes: [TenantAttribute!]!
}


type Environment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  description: String
  region: String
  classification: String!
  service: Service!
  tenants: [EnvironmentTenant!]!
  # components: [ComponentInstance!]!
}


## Input Objects

input ServiceInput {
  name: String!
  code: String!
  description: String
  status: String!
  type: String!
  version: String
  canBeRemoved: Boolean
}

input ObjectQueryInput {
  id: ID
  code: String
}

input EnvironmentInput {
  name: String!
  code: String!
  description: String
  classification: String!
  region: String
}

input EnvironmentTenantInput {
  name: String!
  code: String!
  class: String
  primaryContactEmail: String
  tenantCreationDate: DateTime
}

input CustomerInput {
  name: String!
  code: String!
  status: String!
}

input CustomerContactInput {
  name: String!
  email: String!
  phone: String
  sms: String
}
